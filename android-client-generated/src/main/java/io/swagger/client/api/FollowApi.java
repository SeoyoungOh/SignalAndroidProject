/**
 * 시그널 서버 API
 * 소프트웨어 마에스트로 과정
 * <p>
 * OpenAPI spec version: 0.0.1
 * <p>
 * <p>
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse201;
import io.swagger.client.model.InlineResponse410;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class FollowApi {
    String basePath = "http://52.79.36.12:7504/";
    ApiInvoker apiInvoker = ApiInvoker.getInstance();

    public void addHeader(String key, String value) {
        getInvoker().addDefaultHeader(key, value);
    }

    public ApiInvoker getInvoker() {
        return apiInvoker;
    }

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public String getBasePath() {
        return basePath;
    }

    /**
     * 퍼블리셔 본인의 팔로워 조회
     * 퍼블리셔만 사용할 수 있는 API
     * @param authorization 유저 토큰
     * @return List<InlineResponse2002>
     */
    public List<InlineResponse2002> accountFollowerGet(String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowerGet",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowerGet"));
        }


        // create path and map variables
        String path = "/account/follower".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * 퍼블리셔 본인의 팔로워 조회
     * 퍼블리셔만 사용할 수 있는 API
     * @param authorization 유저 토큰
     */
    public void accountFollowerGet(String authorization, final Response.Listener<List<InlineResponse2002>> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowerGet",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowerGet"));
        }


        // create path and map variables
        String path = "/account/follower".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     * 팔로잉 중인 퍼블리셔 조회
     * 팔로잉 중인 퍼블리셔 조회
     * @param authorization 유저 토큰
     * @return List<InlineResponse2002>
     */
    public List<InlineResponse2002> accountFollowingGet(String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingGet",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingGet"));
        }


        // create path and map variables
        String path = "/account/following".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * 팔로잉 중인 퍼블리셔 조회
     * 팔로잉 중인 퍼블리셔 조회
     * @param authorization 유저 토큰
     */
    public void accountFollowingGet(String authorization, final Response.Listener<List<InlineResponse2002>> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingGet",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingGet"));
        }


        // create path and map variables
        String path = "/account/following".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     * 팔로잉 생성
     * 팔로잉 생성
     * @param authorization 유저 토큰
     * @param followerId 팔로잉하고 싶은 퍼블리셔의 user_id
     * @return InlineResponse201
     */
    public InlineResponse201 accountFollowingPost(String authorization, Integer followerId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingPost",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingPost"));
        }

        // verify the required parameter 'followerId' is set
        if (followerId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'followerId' when calling accountFollowingPost",
                    new ApiException(400, "Missing the required parameter 'followerId' when calling accountFollowingPost"));
        }


        // create path and map variables
        String path = "/account/following".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {
                "multipart/form-data", "application/x-www-form-urlencoded"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (followerId != null) {
                localVarBuilder.addTextBody("follower_id", ApiInvoker.parameterToString(followerId), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("follower_id", ApiInvoker.parameterToString(followerId));
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return (InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class);
            } else {
                return null;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * 팔로잉 생성
     * 팔로잉 생성
     * @param authorization 유저 토큰   * @param followerId 팔로잉하고 싶은 퍼블리셔의 user_id
     */
    public void accountFollowingPost(String authorization, Integer followerId, final Response.Listener<InlineResponse201> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingPost",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingPost"));
        }

        // verify the required parameter 'followerId' is set
        if (followerId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'followerId' when calling accountFollowingPost",
                    new ApiException(400, "Missing the required parameter 'followerId' when calling accountFollowingPost"));
        }


        // create path and map variables
        String path = "/account/following".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {
                "multipart/form-data", "application/x-www-form-urlencoded"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (followerId != null) {
                localVarBuilder.addTextBody("follower_id", ApiInvoker.parameterToString(followerId), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("follower_id", ApiInvoker.parameterToString(followerId));
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((InlineResponse201) ApiInvoker.deserialize(localVarResponse, "", InlineResponse201.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
     * 팔로잉 중인 퍼블리셔 삭제
     * 팔로잉 중인 퍼블리셔 팔로잉 취소
     * @param publisherId 팔로잉삭제 하고 싶은 퍼블리셔의 user_id
     * @param authorization 유저 토큰
     * @return void
     */
    public void accountFollowingPublisherIdDelete(Integer publisherId, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
        Object postBody = null;

        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'publisherId' when calling accountFollowingPublisherIdDelete",
                    new ApiException(400, "Missing the required parameter 'publisherId' when calling accountFollowingPublisherIdDelete"));
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingPublisherIdDelete",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingPublisherIdDelete"));
        }


        // create path and map variables
        String path = "/account/following/{publisher_id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "publisher_id" + "\\}", apiInvoker.escapeString(publisherId.toString()));

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            String localVarResponse = apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
            if (localVarResponse != null) {
                return;
            } else {
                return;
            }
        } catch (ApiException ex) {
            throw ex;
        } catch (InterruptedException ex) {
            throw ex;
        } catch (ExecutionException ex) {
            if (ex.getCause() instanceof VolleyError) {
                VolleyError volleyError = (VolleyError) ex.getCause();
                if (volleyError.networkResponse != null) {
                    throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
                }
            }
            throw ex;
        } catch (TimeoutException ex) {
            throw ex;
        }
    }

    /**
     * 팔로잉 중인 퍼블리셔 삭제
     * 팔로잉 중인 퍼블리셔 팔로잉 취소
     * @param publisherId 팔로잉삭제 하고 싶은 퍼블리셔의 user_id   * @param authorization 유저 토큰
     */
    public void accountFollowingPublisherIdDelete(Integer publisherId, String authorization, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'publisherId' is set
        if (publisherId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'publisherId' when calling accountFollowingPublisherIdDelete",
                    new ApiException(400, "Missing the required parameter 'publisherId' when calling accountFollowingPublisherIdDelete"));
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountFollowingPublisherIdDelete",
                    new ApiException(400, "Missing the required parameter 'authorization' when calling accountFollowingPublisherIdDelete"));
        }


        // create path and map variables
        String path = "/account/following/{publisher_id}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "publisher_id" + "\\}", apiInvoker.escapeString(publisherId.toString()));

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

        String[] contentTypes = {

        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            responseListener.onResponse(localVarResponse);
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }
}
