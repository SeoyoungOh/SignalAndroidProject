/**
 * 시그널 서버 API
 * 소프트웨어 마에스트로 과정
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.io.File;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse400;
import io.swagger.client.model.InlineResponse401;
import io.swagger.client.model.InlineResponse4011;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccountApi {
  String basePath = "http://13.124.38.242:7504/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * User delete
  * 유저 삭제
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
   * @return InlineResponse2001
  */
  public InlineResponse2001 accountDelete (String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountDelete",
      new ApiException(400, "Missing the required parameter 'authorization' when calling accountDelete"));
      }
  

  // create path and map variables
  String path = "/account/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * User delete
   * 유저 삭제
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
  */
  public void accountDelete (String authorization, final Response.Listener<InlineResponse2001> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountDelete",
         new ApiException(400, "Missing the required parameter 'authorization' when calling accountDelete"));
    }
    

    // create path and map variables
    String path = "/account/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2001) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2001.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get user info
  * 유저 정보
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
   * @return InlineResponse200
  */
  public InlineResponse200 accountGet (String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountGet",
      new ApiException(400, "Missing the required parameter 'authorization' when calling accountGet"));
      }
  

  // create path and map variables
  String path = "/account/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * Get user info
   * 유저 정보
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
  */
  public void accountGet (String authorization, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling accountGet"));
    }
    

    // create path and map variables
    String path = "/account/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * User login
  * &#x60;multipart/form-data&#x60;으로 &#x60;username&#x60;(ID에 해당)과 &#x60;password&#x60;를 전송
   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)
   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)
   * @return InlineResponse200
  */
  public InlineResponse200 accountLoginPost (String username, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'username' is set
      if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountLoginPost",
      new ApiException(400, "Missing the required parameter 'username' when calling accountLoginPost"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountLoginPost",
      new ApiException(400, "Missing the required parameter 'password' when calling accountLoginPost"));
      }
  

  // create path and map variables
  String path = "/account/login".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (username != null) {
          localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * User login
   * &#x60;multipart/form-data&#x60;으로 &#x60;username&#x60;(ID에 해당)과 &#x60;password&#x60;를 전송
   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)
  */
  public void accountLoginPost (String username, String password, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'username' is set
    if (username == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountLoginPost",
         new ApiException(400, "Missing the required parameter 'username' when calling accountLoginPost"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountLoginPost",
         new ApiException(400, "Missing the required parameter 'password' when calling accountLoginPost"));
    }
    

    // create path and map variables
    String path = "/account/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (username != null) {
        localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * User logout
  * &#x60;HTTP Request Header&#x60;에 &#x60;Authorization&#x60;를 추가해 전송해야 함. 값은 &#x60;유저 토큰&#x60;
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
   * @return InlineResponse2001
  */
  public InlineResponse2001 accountLogoutGet (String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountLogoutGet",
      new ApiException(400, "Missing the required parameter 'authorization' when calling accountLogoutGet"));
      }
  

  // create path and map variables
  String path = "/account/logout".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * User logout
   * &#x60;HTTP Request Header&#x60;에 &#x60;Authorization&#x60;를 추가해 전송해야 함. 값은 &#x60;유저 토큰&#x60;
   * @param authorization 로그인할 때 반환 받은 &#x60;유저 토큰&#x60; (e.g. &#x60;e6a16f6b26bf7ba14a3ca689aa1234e0f70cae45&#x60;)
  */
  public void accountLogoutGet (String authorization, final Response.Listener<InlineResponse2001> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountLogoutGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling accountLogoutGet"));
    }
    

    // create path and map variables
    String path = "/account/logout".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2001) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2001.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * User Register
  * &#x60;multipart/form-data&#x60;으로 유저 가입 정보를 전송
   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)
   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)
   * @param profilePhoto &#x60;업로드 기능&#x60;을 사용해서 보낼 이미지 파일
   * @param fullName 유저 이름 (e.g. &#x60;정의사&#x60;)
   * @param job 유저 직업 (e.g. &#x60;간호사&#x60;)
   * @param phoneNumber 유저 폰번호 (e.g. &#x60;01012345678&#x60;)
   * @return InlineResponse200
  */
  public InlineResponse200 accountPost (String username, String password, File profilePhoto, String fullName, String job, String phoneNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'username' is set
      if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountPost",
      new ApiException(400, "Missing the required parameter 'username' when calling accountPost"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountPost",
      new ApiException(400, "Missing the required parameter 'password' when calling accountPost"));
      }
  

  // create path and map variables
  String path = "/account/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (profilePhoto != null) {
          localVarBuilder.addBinaryBody("profile_photo", profilePhoto);
          }
  
          if (username != null) {
          localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (fullName != null) {
          localVarBuilder.addTextBody("full_name", ApiInvoker.parameterToString(fullName), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (job != null) {
          localVarBuilder.addTextBody("job", ApiInvoker.parameterToString(job), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  
formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("full_name", ApiInvoker.parameterToString(fullName));
formParams.put("job", ApiInvoker.parameterToString(job));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse200) ApiInvoker.deserialize(localVarResponse, "", InlineResponse200.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * User Register
   * &#x60;multipart/form-data&#x60;으로 유저 가입 정보를 전송
   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)   * @param profilePhoto &#x60;업로드 기능&#x60;을 사용해서 보낼 이미지 파일   * @param fullName 유저 이름 (e.g. &#x60;정의사&#x60;)   * @param job 유저 직업 (e.g. &#x60;간호사&#x60;)   * @param phoneNumber 유저 폰번호 (e.g. &#x60;01012345678&#x60;)
  */
  public void accountPost (String username, String password, File profilePhoto, String fullName, String job, String phoneNumber, final Response.Listener<InlineResponse200> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'username' is set
    if (username == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountPost",
         new ApiException(400, "Missing the required parameter 'username' when calling accountPost"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountPost",
         new ApiException(400, "Missing the required parameter 'password' when calling accountPost"));
    }
    

    // create path and map variables
    String path = "/account/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (profilePhoto != null) {
        localVarBuilder.addBinaryBody("profile_photo", profilePhoto);
      }
      
      if (username != null) {
        localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (fullName != null) {
        localVarBuilder.addTextBody("full_name", ApiInvoker.parameterToString(fullName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (job != null) {
        localVarBuilder.addTextBody("job", ApiInvoker.parameterToString(job), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("full_name", ApiInvoker.parameterToString(fullName));
formParams.put("job", ApiInvoker.parameterToString(job));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse200) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse200.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * User update
  * 유저 업데이트
   * @param authorization 유저 토큰
   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)
   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)
   * @return InlineResponse2001
  */
  public InlineResponse2001 accountPut (String authorization, String username, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountPut",
      new ApiException(400, "Missing the required parameter 'authorization' when calling accountPut"));
      }
  
      // verify the required parameter 'username' is set
      if (username == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountPut",
      new ApiException(400, "Missing the required parameter 'username' when calling accountPut"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountPut",
      new ApiException(400, "Missing the required parameter 'password' when calling accountPut"));
      }
  

  // create path and map variables
  String path = "/account/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (username != null) {
          localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2001) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2001.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * User update
   * 유저 업데이트
   * @param authorization 유저 토큰   * @param username 유저 ID (e.g. &#x60;new_guest&#x60;)   * @param password 유저 비밀번호 (e.g. &#x60;asdf1234&#x60;)
  */
  public void accountPut (String authorization, String username, String password, final Response.Listener<InlineResponse2001> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling accountPut",
         new ApiException(400, "Missing the required parameter 'authorization' when calling accountPut"));
    }
    
    // verify the required parameter 'username' is set
    if (username == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'username' when calling accountPut",
         new ApiException(400, "Missing the required parameter 'username' when calling accountPut"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling accountPut",
         new ApiException(400, "Missing the required parameter 'password' when calling accountPut"));
    }
    

    // create path and map variables
    String path = "/account/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (username != null) {
        localVarBuilder.addTextBody("username", ApiInvoker.parameterToString(username), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("username", ApiInvoker.parameterToString(username));
formParams.put("password", ApiInvoker.parameterToString(password));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2001) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2001.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
