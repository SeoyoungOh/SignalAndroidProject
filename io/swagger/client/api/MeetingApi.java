/**
 * 시그널 서버 API
 * 소프트웨어 마에스트로 과정
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.io.File;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2011;
import io.swagger.client.model.InlineResponse2012;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MeetingApi {
  String basePath = "http://13.124.38.242:7504/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 서버에 있는 모든 만남 조회
  * 특정 퍼블리셔가 만든 만남을 조회 할 때는 밑에 있는 API를 이용해야함
   * @return List<InlineResponse2002>
  */
  public List<InlineResponse2002> meetingGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/meeting/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 서버에 있는 모든 만남 조회
   * 특정 퍼블리셔가 만든 만남을 조회 할 때는 밑에 있는 API를 이용해야함

  */
  public void meetingGet (final Response.Listener<List<InlineResponse2002>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/meeting/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse,  "array", InlineResponse2002.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 내가 참여한 모든 만남 조회
  * 내가 참여한 모든 만남 조회
   * @param authorization 유저 토큰
   * @return List<InlineResponse2002>
  */
  public List<InlineResponse2002> meetingParticipateGet (String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingParticipateGet",
      new ApiException(400, "Missing the required parameter 'authorization' when calling meetingParticipateGet"));
      }
  

  // create path and map variables
  String path = "/meeting/participate".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 내가 참여한 모든 만남 조회
   * 내가 참여한 모든 만남 조회
   * @param authorization 유저 토큰
  */
  public void meetingParticipateGet (String authorization, final Response.Listener<List<InlineResponse2002>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingParticipateGet",
         new ApiException(400, "Missing the required parameter 'authorization' when calling meetingParticipateGet"));
    }
    

    // create path and map variables
    String path = "/meeting/participate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse,  "array", InlineResponse2002.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 만남 참여하기
  * &#x60;multipart/form-data&#x60;으로 만남 참여 정보를 전송
   * @param authorization 유저 토큰
   * @param meetingId 참여할 만남의 &#x60;id&#x60;
   * @param shortOpinion 참여할 만남에 적는 한마디 (e.g. &#x60;야호 신난다&#x60;)
   * @return InlineResponse2012
  */
  public InlineResponse2012 meetingParticipatePost (String authorization, File meetingId, File shortOpinion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingParticipatePost",
      new ApiException(400, "Missing the required parameter 'authorization' when calling meetingParticipatePost"));
      }
  
      // verify the required parameter 'meetingId' is set
      if (meetingId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'meetingId' when calling meetingParticipatePost",
      new ApiException(400, "Missing the required parameter 'meetingId' when calling meetingParticipatePost"));
      }
  
      // verify the required parameter 'shortOpinion' is set
      if (shortOpinion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shortOpinion' when calling meetingParticipatePost",
      new ApiException(400, "Missing the required parameter 'shortOpinion' when calling meetingParticipatePost"));
      }
  

  // create path and map variables
  String path = "/meeting/participate".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  "multipart/form-data","application/x-www-form-urlencoded"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (meetingId != null) {
          localVarBuilder.addBinaryBody("meeting_id", meetingId);
          }
  
          if (shortOpinion != null) {
          localVarBuilder.addBinaryBody("short_opinion", shortOpinion);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  

      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2012.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 만남 참여하기
   * &#x60;multipart/form-data&#x60;으로 만남 참여 정보를 전송
   * @param authorization 유저 토큰   * @param meetingId 참여할 만남의 &#x60;id&#x60;   * @param shortOpinion 참여할 만남에 적는 한마디 (e.g. &#x60;야호 신난다&#x60;)
  */
  public void meetingParticipatePost (String authorization, File meetingId, File shortOpinion, final Response.Listener<InlineResponse2012> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingParticipatePost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling meetingParticipatePost"));
    }
    
    // verify the required parameter 'meetingId' is set
    if (meetingId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'meetingId' when calling meetingParticipatePost",
         new ApiException(400, "Missing the required parameter 'meetingId' when calling meetingParticipatePost"));
    }
    
    // verify the required parameter 'shortOpinion' is set
    if (shortOpinion == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'shortOpinion' when calling meetingParticipatePost",
         new ApiException(400, "Missing the required parameter 'shortOpinion' when calling meetingParticipatePost"));
    }
    

    // create path and map variables
    String path = "/meeting/participate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "multipart/form-data","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (meetingId != null) {
        localVarBuilder.addBinaryBody("meeting_id", meetingId);
      }
      
      if (shortOpinion != null) {
        localVarBuilder.addBinaryBody("short_opinion", shortOpinion);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      

    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2012) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2012.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 만남 생성
  * &#x60;multipart/form-data&#x60;으로 만남 정보를 전송
   * @param authorization 유저 토큰
   * @param title 만남 제목 (e.g. &#x60;바둑 가르쳐 드립니다&#x60;)
   * @param content 만남 본문 내용 (e.g. &#x60;저 바둑 고수입니다. 저한테서 배우고 싶으신 분들 10명만 오세요.&#x60;)
   * @param meetingPhoto &#x60;업로드 기능&#x60;을 사용해서 보낼 만남 본문 이미지 파일
   * @param maximumPeople 최대 인원수 (e.g. &#x60;10&#x60;)
   * @param location 위치 (e.g. &#x60;서울시&#x60;)
   * @param entryFeeType 참가비 유형 (e.g. &#x60;기타&#x60;)
   * @param entryFee 참가비 (e.g. &#x60;200000&#x60;)
   * @param entryDueTime 참가 신청 마감 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)
   * @param startTime 만남 시작 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)
   * @param endTime 만남 끝나는 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)
   * @return InlineResponse2011
  */
  public InlineResponse2011 meetingPost (String authorization, String title, String content, File meetingPhoto, Integer maximumPeople, String location, String entryFeeType, Integer entryFee, String entryDueTime, String startTime, String endTime) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'authorization' is set
      if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingPost",
      new ApiException(400, "Missing the required parameter 'authorization' when calling meetingPost"));
      }
  
      // verify the required parameter 'title' is set
      if (title == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'title' when calling meetingPost",
      new ApiException(400, "Missing the required parameter 'title' when calling meetingPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling meetingPost",
      new ApiException(400, "Missing the required parameter 'content' when calling meetingPost"));
      }
  

  // create path and map variables
  String path = "/meeting/".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();


          headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

      String[] contentTypes = {
  "multipart/form-data","application/x-www-form-urlencoded"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (meetingPhoto != null) {
          localVarBuilder.addBinaryBody("meeting_photo", meetingPhoto);
          }
  
          if (title != null) {
          localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (maximumPeople != null) {
          localVarBuilder.addTextBody("maximum_people", ApiInvoker.parameterToString(maximumPeople), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (location != null) {
          localVarBuilder.addTextBody("location", ApiInvoker.parameterToString(location), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (entryFeeType != null) {
          localVarBuilder.addTextBody("entry_fee_type", ApiInvoker.parameterToString(entryFeeType), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (entryFee != null) {
          localVarBuilder.addTextBody("entry_fee", ApiInvoker.parameterToString(entryFee), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (entryDueTime != null) {
          localVarBuilder.addTextBody("entry_due_time", ApiInvoker.parameterToString(entryDueTime), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (startTime != null) {
          localVarBuilder.addTextBody("start_time", ApiInvoker.parameterToString(startTime), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (endTime != null) {
          localVarBuilder.addTextBody("end_time", ApiInvoker.parameterToString(endTime), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("maximum_people", ApiInvoker.parameterToString(maximumPeople));
formParams.put("location", ApiInvoker.parameterToString(location));
formParams.put("entry_fee_type", ApiInvoker.parameterToString(entryFeeType));
formParams.put("entry_fee", ApiInvoker.parameterToString(entryFee));
formParams.put("entry_due_time", ApiInvoker.parameterToString(entryDueTime));
formParams.put("start_time", ApiInvoker.parameterToString(startTime));
formParams.put("end_time", ApiInvoker.parameterToString(endTime));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InlineResponse2011) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2011.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 만남 생성
   * &#x60;multipart/form-data&#x60;으로 만남 정보를 전송
   * @param authorization 유저 토큰   * @param title 만남 제목 (e.g. &#x60;바둑 가르쳐 드립니다&#x60;)   * @param content 만남 본문 내용 (e.g. &#x60;저 바둑 고수입니다. 저한테서 배우고 싶으신 분들 10명만 오세요.&#x60;)   * @param meetingPhoto &#x60;업로드 기능&#x60;을 사용해서 보낼 만남 본문 이미지 파일   * @param maximumPeople 최대 인원수 (e.g. &#x60;10&#x60;)   * @param location 위치 (e.g. &#x60;서울시&#x60;)   * @param entryFeeType 참가비 유형 (e.g. &#x60;기타&#x60;)   * @param entryFee 참가비 (e.g. &#x60;200000&#x60;)   * @param entryDueTime 참가 신청 마감 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)   * @param startTime 만남 시작 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)   * @param endTime 만남 끝나는 시간 (e.g. &#x60;2017-10-18T07:55:01.611778+00:00&#x60;)
  */
  public void meetingPost (String authorization, String title, String content, File meetingPhoto, Integer maximumPeople, String location, String entryFeeType, Integer entryFee, String entryDueTime, String startTime, String endTime, final Response.Listener<InlineResponse2011> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling meetingPost",
         new ApiException(400, "Missing the required parameter 'authorization' when calling meetingPost"));
    }
    
    // verify the required parameter 'title' is set
    if (title == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'title' when calling meetingPost",
         new ApiException(400, "Missing the required parameter 'title' when calling meetingPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling meetingPost",
         new ApiException(400, "Missing the required parameter 'content' when calling meetingPost"));
    }
    

    // create path and map variables
    String path = "/meeting/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "multipart/form-data","application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (meetingPhoto != null) {
        localVarBuilder.addBinaryBody("meeting_photo", meetingPhoto);
      }
      
      if (title != null) {
        localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (maximumPeople != null) {
        localVarBuilder.addTextBody("maximum_people", ApiInvoker.parameterToString(maximumPeople), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (location != null) {
        localVarBuilder.addTextBody("location", ApiInvoker.parameterToString(location), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (entryFeeType != null) {
        localVarBuilder.addTextBody("entry_fee_type", ApiInvoker.parameterToString(entryFeeType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (entryFee != null) {
        localVarBuilder.addTextBody("entry_fee", ApiInvoker.parameterToString(entryFee), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (entryDueTime != null) {
        localVarBuilder.addTextBody("entry_due_time", ApiInvoker.parameterToString(entryDueTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (startTime != null) {
        localVarBuilder.addTextBody("start_time", ApiInvoker.parameterToString(startTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (endTime != null) {
        localVarBuilder.addTextBody("end_time", ApiInvoker.parameterToString(endTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("maximum_people", ApiInvoker.parameterToString(maximumPeople));
formParams.put("location", ApiInvoker.parameterToString(location));
formParams.put("entry_fee_type", ApiInvoker.parameterToString(entryFeeType));
formParams.put("entry_fee", ApiInvoker.parameterToString(entryFee));
formParams.put("entry_due_time", ApiInvoker.parameterToString(entryDueTime));
formParams.put("start_time", ApiInvoker.parameterToString(startTime));
formParams.put("end_time", ApiInvoker.parameterToString(endTime));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2011) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2011.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 특정 퍼블리셔가 만든 만남 조회
  * 특정 퍼블리셔가 만든 만남 조회
   * @param publisherId 만든 만남을 조회하고 싶은 퍼블리셔의 user_id
   * @return List<InlineResponse2002>
  */
  public List<InlineResponse2002> meetingPublisherIdGet (Integer publisherId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'publisherId' is set
      if (publisherId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'publisherId' when calling meetingPublisherIdGet",
      new ApiException(400, "Missing the required parameter 'publisherId' when calling meetingPublisherIdGet"));
      }
  

  // create path and map variables
  String path = "/meeting/{publisher_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "publisher_id" + "\\}", apiInvoker.escapeString(publisherId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse, "array", InlineResponse2002.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 특정 퍼블리셔가 만든 만남 조회
   * 특정 퍼블리셔가 만든 만남 조회
   * @param publisherId 만든 만남을 조회하고 싶은 퍼블리셔의 user_id
  */
  public void meetingPublisherIdGet (Integer publisherId, final Response.Listener<List<InlineResponse2002>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'publisherId' is set
    if (publisherId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'publisherId' when calling meetingPublisherIdGet",
         new ApiException(400, "Missing the required parameter 'publisherId' when calling meetingPublisherIdGet"));
    }
    

    // create path and map variables
    String path = "/meeting/{publisher_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "publisher_id" + "\\}", apiInvoker.escapeString(publisherId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<InlineResponse2002>) ApiInvoker.deserialize(localVarResponse,  "array", InlineResponse2002.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
